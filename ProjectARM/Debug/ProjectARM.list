
ProjectARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000157c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800171c  0800171c  0000271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800176c  0800176c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800176c  0800176c  0000276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001774  08001774  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001774  08001774  00002774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001778  08001778  00002778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800177c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000054  080017d0  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080017d0  0000322c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001121  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000400  00000000  00000000  000041a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  000045a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d3  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e9b5  00000000  00000000  000047a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000134b  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000533e4  00000000  00000000  000144a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008e0  00000000  00000000  000678cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000681ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001704 	.word	0x08001704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001704 	.word	0x08001704

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <gpio_config>:
	LEFT_INDICATOR_ON = 2,
	PARKING_LIGHT_ON = 3
} Status;
Status current_status = OFF;

void gpio_config() {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	// Enable clocks for ports A, B, and C
	RCC->AHB1ENR = (1<<0)|(1<<1)|(1<<2);
 8000314:	4b36      	ldr	r3, [pc, #216]	@ (80003f0 <gpio_config+0xe0>)
 8000316:	2207      	movs	r2, #7
 8000318:	631a      	str	r2, [r3, #48]	@ 0x30

	// Setup GPIO for LED1 PC6 as OUTPUT
	GPIOC->MODER &=~(1<<13);
 800031a:	4b36      	ldr	r3, [pc, #216]	@ (80003f4 <gpio_config+0xe4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a35      	ldr	r2, [pc, #212]	@ (80003f4 <gpio_config+0xe4>)
 8000320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000324:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<12);
 8000326:	4b33      	ldr	r3, [pc, #204]	@ (80003f4 <gpio_config+0xe4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a32      	ldr	r2, [pc, #200]	@ (80003f4 <gpio_config+0xe4>)
 800032c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000330:	6013      	str	r3, [r2, #0]

	// Setup GPIO for buzzer
	GPIOC->MODER |= (1<<18);
 8000332:	4b30      	ldr	r3, [pc, #192]	@ (80003f4 <gpio_config+0xe4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a2f      	ldr	r2, [pc, #188]	@ (80003f4 <gpio_config+0xe4>)
 8000338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800033c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1<<19);
 800033e:	4b2d      	ldr	r3, [pc, #180]	@ (80003f4 <gpio_config+0xe4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a2c      	ldr	r2, [pc, #176]	@ (80003f4 <gpio_config+0xe4>)
 8000344:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000348:	6013      	str	r3, [r2, #0]

	// Setup GPIO for LED2-3-4 PB13 PB14 PB15 as OUTPUT
	GPIOB->MODER &=~((1<<27)|(1<<29)|(1<<31));
 800034a:	4b2b      	ldr	r3, [pc, #172]	@ (80003f8 <gpio_config+0xe8>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a2a      	ldr	r2, [pc, #168]	@ (80003f8 <gpio_config+0xe8>)
 8000350:	f023 4328 	bic.w	r3, r3, #2818572288	@ 0xa8000000
 8000354:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<26)|(1<<28)|(1<<30);
 8000356:	4b28      	ldr	r3, [pc, #160]	@ (80003f8 <gpio_config+0xe8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a27      	ldr	r2, [pc, #156]	@ (80003f8 <gpio_config+0xe8>)
 800035c:	f043 43a8 	orr.w	r3, r3, #1409286144	@ 0x54000000
 8000360:	6013      	str	r3, [r2, #0]

	// Setup GPIO for PB7 - PB3 - PB4 as INPUT with Pull-up
	GPIOB->MODER &=~((1<<14)|(1<<15)|(1<<6)|(1<<7)|(1<<8)|(1<<9));
 8000362:	4b25      	ldr	r3, [pc, #148]	@ (80003f8 <gpio_config+0xe8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a24      	ldr	r2, [pc, #144]	@ (80003f8 <gpio_config+0xe8>)
 8000368:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800036c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000370:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= (1<<14)|(1<<6)|(1<<8);
 8000372:	4b21      	ldr	r3, [pc, #132]	@ (80003f8 <gpio_config+0xe8>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	4a20      	ldr	r2, [pc, #128]	@ (80003f8 <gpio_config+0xe8>)
 8000378:	f443 4382 	orr.w	r3, r3, #16640	@ 0x4100
 800037c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000380:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~((1<<15)|(1<<7)|(1<<9));
 8000382:	4b1d      	ldr	r3, [pc, #116]	@ (80003f8 <gpio_config+0xe8>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	4a1c      	ldr	r2, [pc, #112]	@ (80003f8 <gpio_config+0xe8>)
 8000388:	f423 4302 	bic.w	r3, r3, #33280	@ 0x8200
 800038c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000390:	60d3      	str	r3, [r2, #12]

	// Setup GPIO for PA15 as INPUT with Pull-up
	GPIOA->MODER &= ~((1<<30)|(1<<31));
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <gpio_config+0xec>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a19      	ldr	r2, [pc, #100]	@ (80003fc <gpio_config+0xec>)
 8000398:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800039c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1<<30);
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <gpio_config+0xec>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	4a16      	ldr	r2, [pc, #88]	@ (80003fc <gpio_config+0xec>)
 80003a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003a8:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1<<31);
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <gpio_config+0xec>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	4a13      	ldr	r2, [pc, #76]	@ (80003fc <gpio_config+0xec>)
 80003b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80003b4:	60d3      	str	r3, [r2, #12]

	//initial turn off all LEDs
	GPIOB->ODR |= (1<<13);
 80003b6:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <gpio_config+0xe8>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a0f      	ldr	r2, [pc, #60]	@ (80003f8 <gpio_config+0xe8>)
 80003bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c0:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= (1<<14);
 80003c2:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <gpio_config+0xe8>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a0c      	ldr	r2, [pc, #48]	@ (80003f8 <gpio_config+0xe8>)
 80003c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003cc:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= (1<<15);
 80003ce:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <gpio_config+0xe8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <gpio_config+0xe8>)
 80003d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003d8:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= (1<<6);
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <gpio_config+0xe4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <gpio_config+0xe4>)
 80003e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003e4:	6153      	str	r3, [r2, #20]
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020800 	.word	0x40020800
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40020000 	.word	0x40020000

08000400 <uart_init>:
void uart_init()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<17);
 8000404:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <uart_init+0xa4>)
 8000406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000408:	4a26      	ldr	r2, [pc, #152]	@ (80004a4 <uart_init+0xa4>)
 800040a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER |= (1<<5);			//alternate PA2
 8000410:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <uart_init+0xa8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a24      	ldr	r2, [pc, #144]	@ (80004a8 <uart_init+0xa8>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1<<4);
 800041c:	4b22      	ldr	r3, [pc, #136]	@ (80004a8 <uart_init+0xa8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a21      	ldr	r2, [pc, #132]	@ (80004a8 <uart_init+0xa8>)
 8000422:	f023 0310 	bic.w	r3, r3, #16
 8000426:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (1<<7);			//alternate PA3
 8000428:	4b1f      	ldr	r3, [pc, #124]	@ (80004a8 <uart_init+0xa8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1e      	ldr	r2, [pc, #120]	@ (80004a8 <uart_init+0xa8>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000432:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1<<6);
 8000434:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <uart_init+0xa8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1b      	ldr	r2, [pc, #108]	@ (80004a8 <uart_init+0xa8>)
 800043a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800043e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (0x7<<8);		//set AF7-TX for PA2 -> 2*4 = 8
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <uart_init+0xa8>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a18      	ldr	r2, [pc, #96]	@ (80004a8 <uart_init+0xa8>)
 8000446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800044a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<12);		//set AF7-RX for PA3 -> 3*4 = 12
 800044c:	4b16      	ldr	r3, [pc, #88]	@ (80004a8 <uart_init+0xa8>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <uart_init+0xa8>)
 8000452:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000456:	6213      	str	r3, [r2, #32]

//	USART2->CR1 |= (1<<7);			//set interrupt for TX pin PA2
	USART2->CR1 |= (1<<5);			//set interrupt for RX pin PA3
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <uart_init+0xac>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <uart_init+0xac>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3);			//USART enable transmitter
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <uart_init+0xac>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a10      	ldr	r2, [pc, #64]	@ (80004ac <uart_init+0xac>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<2);			//USART enable receiver
 8000470:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <uart_init+0xac>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <uart_init+0xac>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	60d3      	str	r3, [r2, #12]
	USART2->BRR = (PCLK+(Baudrate/2))/Baudrate;
 800047c:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <uart_init+0xac>)
 800047e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000482:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= (1<<13);			//enable UART
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <uart_init+0xac>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a08      	ldr	r2, [pc, #32]	@ (80004ac <uart_init+0xac>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048e:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI1_IRQn,2);
 8000490:	2102      	movs	r1, #2
 8000492:	2007      	movs	r0, #7
 8000494:	f7ff ff12 	bl	80002bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8000498:	2026      	movs	r0, #38	@ 0x26
 800049a:	f7ff fef1 	bl	8000280 <__NVIC_EnableIRQ>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020000 	.word	0x40020000
 80004ac:	40004400 	.word	0x40004400

080004b0 <send_char>:
void send_char(unsigned char ch)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR&(1<<7)));  	//wait till the data register gets empty
 80004ba:	bf00      	nop
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <send_char+0x2c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <send_char+0xc>
	USART2->DR=ch;
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <send_char+0x2c>)
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	6053      	str	r3, [r2, #4]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40004400 	.word	0x40004400

080004e0 <send_string>:
void send_string(char *str)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	while(*str)
 80004e8:	e007      	b.n	80004fa <send_string+0x1a>
	{
		send_char(*str);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ffde 	bl	80004b0 <send_char>
		str++;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
	while(*str)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1f3      	bne.n	80004ea <send_string+0xa>
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <TIM1_PWM_Init>:
void TIM1_PWM_Init()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	//Configure PC6 for TIM3_CH1
//	RCC->AHB1ENR |= (1<<0);
	GPIOB->MODER &= ~(1<<26);
 8000510:	4b27      	ldr	r3, [pc, #156]	@ (80005b0 <TIM1_PWM_Init+0xa4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a26      	ldr	r2, [pc, #152]	@ (80005b0 <TIM1_PWM_Init+0xa4>)
 8000516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800051a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<27);		//select alternate function mode
 800051c:	4b24      	ldr	r3, [pc, #144]	@ (80005b0 <TIM1_PWM_Init+0xa4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <TIM1_PWM_Init+0xa4>)
 8000522:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000526:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] = (1<<20);  		// 0 is for AFRL if AFRH is 1 (AF2)//Set alternate function 1 (AF1) for PB13
 8000528:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <TIM1_PWM_Init+0xa4>)
 800052a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800052e:	625a      	str	r2, [r3, #36]	@ 0x24

	//Configure Timer 1 Channel 1
	RCC->APB2ENR |= (1<<0);			// Enable clock for TIMER1
 8000530:	4b20      	ldr	r3, [pc, #128]	@ (80005b4 <TIM1_PWM_Init+0xa8>)
 8000532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000534:	4a1f      	ldr	r2, [pc, #124]	@ (80005b4 <TIM1_PWM_Init+0xa8>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM1->PSC = 0;					// do not divide the input frequency
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 10000-1;			//	load some default value
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000544:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000548:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCMR1 |= (1<<3);
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a1a      	ldr	r2, [pc, #104]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<5) | (1<<6);	// select PWM1 mode
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800055c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000560:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &= ~(1<<4);			// select PWM1 mode
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000568:	f023 0310 	bic.w	r3, r3, #16
 800056c:	6193      	str	r3, [r2, #24]
	// Configure complementary output (CH1N)
	TIM1->CCER &=~(1<<3);			//OC1N active high
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000570:	6a1b      	ldr	r3, [r3, #32]
 8000572:	4a11      	ldr	r2, [pc, #68]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000574:	f023 0308 	bic.w	r3, r3, #8
 8000578:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= (1<<2);      		// Enable complementary output (CC1NE)
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800057c:	6a1b      	ldr	r3, [r3, #32]
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6213      	str	r3, [r2, #32]
    TIM1->BDTR |= (1<<15);     		// MOE (Main Output Enable) bit
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800058a:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800058c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000590:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM1->CNT = 0;					//Timer start count from 0
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 8000594:	2200      	movs	r2, #0
 8000596:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= (1<<0);			//enable counter
 8000598:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <TIM1_PWM_Init+0xac>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40020400 	.word	0x40020400
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40010000 	.word	0x40010000

080005bc <Set_frq_duty_cycle_TIM1>:
void Set_frq_duty_cycle_TIM1(unsigned long int frequency, unsigned int duty)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	TIM1->ARR = ((16000000/frequency)-1);
 80005c6:	4a0c      	ldr	r2, [pc, #48]	@ (80005f8 <Set_frq_duty_cycle_TIM1+0x3c>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <Set_frq_duty_cycle_TIM1+0x40>)
 80005d0:	3b01      	subs	r3, #1
 80005d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = (duty*((TIM1->ARR)+1))/100;	//CCR1 because we use channel 1
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <Set_frq_duty_cycle_TIM1+0x40>)
 80005d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d8:	3301      	adds	r3, #1
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	fb02 f303 	mul.w	r3, r2, r3
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <Set_frq_duty_cycle_TIM1+0x40>)
 80005e2:	4907      	ldr	r1, [pc, #28]	@ (8000600 <Set_frq_duty_cycle_TIM1+0x44>)
 80005e4:	fba1 1303 	umull	r1, r3, r1, r3
 80005e8:	095b      	lsrs	r3, r3, #5
 80005ea:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	00f42400 	.word	0x00f42400
 80005fc:	40010000 	.word	0x40010000
 8000600:	51eb851f 	.word	0x51eb851f

08000604 <TIM3_Init>:
void TIM3_Init()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
	__disable_irq();
	RCC->APB1ENR |= (1<<1);
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <TIM3_Init+0x58>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	4a12      	ldr	r2, [pc, #72]	@ (800065c <TIM3_Init+0x58>)
 8000612:	f043 0302 	orr.w	r3, r3, #2
 8000616:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3->PSC = 16000-1;			//set frequency 1kHz = 1ms
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <TIM3_Init+0x5c>)
 800061a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800061e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CNT = 0;					//count from 0
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <TIM3_Init+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->ARR = 500-1;				//interrupt after 500ms
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <TIM3_Init+0x5c>)
 8000628:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800062c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->DIER |= (1<<0);			//enable interrupt for timer 2
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <TIM3_Init+0x5c>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <TIM3_Init+0x5c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= (1<<0);			//enable counter
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <TIM3_Init+0x5c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a08      	ldr	r2, [pc, #32]	@ (8000660 <TIM3_Init+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM3_IRQn, 2);
 8000646:	2102      	movs	r1, #2
 8000648:	201d      	movs	r0, #29
 800064a:	f7ff fe37 	bl	80002bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 800064e:	201d      	movs	r0, #29
 8000650:	f7ff fe16 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000654:	b662      	cpsie	i
}
 8000656:	bf00      	nop
	__enable_irq();
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40000400 	.word	0x40000400

08000664 <adc_init>:
void adc_init()
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	RCC->APB2ENR|=(1<<8);			//enable clock for ADC1
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <adc_init+0x5c>)
 800066a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066c:	4a14      	ldr	r2, [pc, #80]	@ (80006c0 <adc_init+0x5c>)
 800066e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000672:	6453      	str	r3, [r2, #68]	@ 0x44
	// Setup  PC2 mode adc input
	GPIOC->MODER |= ((1<<4)|(1<<5));
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <adc_init+0x60>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <adc_init+0x60>)
 800067a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800067e:	6013      	str	r3, [r2, #0]
	//configure adc
	ADC1->SQR1&=~(0xF<<20);			// bit [23:20] 1 conversion
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <adc_init+0x64>)
 8000682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000684:	4a10      	ldr	r2, [pc, #64]	@ (80006c8 <adc_init+0x64>)
 8000686:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800068a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 = (12<<0);			// write the channel of ADC1_IN12?
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <adc_init+0x64>)
 800068e:	220c      	movs	r2, #12
 8000690:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC1->CR2|=(1<<1);				//continuous conversion
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <adc_init+0x64>)
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <adc_init+0x64>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6093      	str	r3, [r2, #8]
	ADC1->CR2|=(1<<0);				//enable ADC converter
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <adc_init+0x64>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <adc_init+0x64>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6093      	str	r3, [r2, #8]
	ADC1->CR2|=(1<<30);				// start conversion
 80006aa:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <adc_init+0x64>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <adc_init+0x64>)
 80006b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80006b4:	6093      	str	r3, [r2, #8]
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020800 	.word	0x40020800
 80006c8:	40012000 	.word	0x40012000

080006cc <Ext_init_PB7>:
void Ext_init_PB7()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
    __disable_irq();                // Disable global interrupt
    RCC->APB2ENR |= (1 << 14);      // Enable System configuration control clock
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <Ext_init_PB7+0x50>)
 80006d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d8:	4a10      	ldr	r2, [pc, #64]	@ (800071c <Ext_init_PB7+0x50>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[1] |= (1 << 12); // Select PB7 as External Interrupt pin
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <Ext_init_PB7+0x54>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000720 <Ext_init_PB7+0x54>)
 80006e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006ea:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= (1 << 7);          // Unmask on line PB7
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <Ext_init_PB7+0x58>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <Ext_init_PB7+0x58>)
 80006f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 7);         // Falling edge triggered on line PB7
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <Ext_init_PB7+0x58>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	4a09      	ldr	r2, [pc, #36]	@ (8000724 <Ext_init_PB7+0x58>)
 80006fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000702:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(EXTI1_IRQn,1);
 8000704:	2101      	movs	r1, #1
 8000706:	2007      	movs	r0, #7
 8000708:	f7ff fdd8 	bl	80002bc <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI9_5_IRQn);   // Enable EXTI7
 800070c:	2017      	movs	r0, #23
 800070e:	f7ff fdb7 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000712:	b662      	cpsie	i
}
 8000714:	bf00      	nop
    __enable_irq();                 // Enable global interrupt
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40013800 	.word	0x40013800
 8000724:	40013c00 	.word	0x40013c00

08000728 <Ext_init_PB3>:
/* External interrupt button 2 as PB3 */
void Ext_init_PB3()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
    __disable_irq();                // Disable global interrupt
    RCC->APB2ENR |= (1 << 14);      // Enable System configuration control clock
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <Ext_init_PB3+0x50>)
 8000732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000734:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <Ext_init_PB3+0x50>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073a:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[0] |= (1 << 12); // Select PB3 as External Interrupt pin
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <Ext_init_PB3+0x54>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <Ext_init_PB3+0x54>)
 8000742:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000746:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= (1 << 3);          // Unmask on line PB3
 8000748:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <Ext_init_PB3+0x58>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <Ext_init_PB3+0x58>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 3);         // Falling edge triggered on line PB3
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <Ext_init_PB3+0x58>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <Ext_init_PB3+0x58>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(EXTI1_IRQn,1);
 8000760:	2101      	movs	r1, #1
 8000762:	2007      	movs	r0, #7
 8000764:	f7ff fdaa 	bl	80002bc <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI3_IRQn);     // Enable EXTI3
 8000768:	2009      	movs	r0, #9
 800076a:	f7ff fd89 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800076e:	b662      	cpsie	i
}
 8000770:	bf00      	nop
    __enable_irq();                 // Enable global interrupt
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40013800 	.word	0x40013800
 8000780:	40013c00 	.word	0x40013c00

08000784 <Ext_init_PB4>:
/* External interrupt button 3 as PB4 */
void Ext_init_PB4()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
    __disable_irq();               	// Disable global interrupt
    RCC->APB2ENR |= (1 << 14);     	// Enable System configuration control clock
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <Ext_init_PB4+0x50>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000790:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <Ext_init_PB4+0x50>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000796:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[1] |= (1 << 0); 	// Select PB4 as External Interrupt pin
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <Ext_init_PB4+0x54>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <Ext_init_PB4+0x54>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= (1 << 4);         	// Unmask on line PB4
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <Ext_init_PB4+0x58>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <Ext_init_PB4+0x58>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= (1 << 4);        	// Falling edge triggered on line PB4
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <Ext_init_PB4+0x58>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	4a09      	ldr	r2, [pc, #36]	@ (80007dc <Ext_init_PB4+0x58>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI1_IRQn,1);
 80007bc:	2101      	movs	r1, #1
 80007be:	2007      	movs	r0, #7
 80007c0:	f7ff fd7c 	bl	80002bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);    	// Enable EXTI4
 80007c4:	200a      	movs	r0, #10
 80007c6:	f7ff fd5b 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80007ca:	b662      	cpsie	i
}
 80007cc:	bf00      	nop
	__enable_irq();                	// Enable global interrupt
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40013c00 	.word	0x40013c00

080007e0 <Ext_init_PA15>:
/* External interrupt button 4 as PA15 */
void Ext_init_PA15()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
	__disable_irq();                // Disable global interrupt
	RCC->APB2ENR |= (1 << 14);      // Enable System configuration control clock
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <Ext_init_PA15+0x4c>)
 80007ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ec:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <Ext_init_PA15+0x4c>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f2:	6453      	str	r3, [r2, #68]	@ 0x44
	SYSCFG->EXTICR[3] |= (0 << 15); // Select PA15 as External Interrupt pin
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <Ext_init_PA15+0x50>)
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <Ext_init_PA15+0x50>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	6153      	str	r3, [r2, #20]
	EXTI->IMR |= (1 << 15);         // Unmask on line PA15
 80007fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <Ext_init_PA15+0x54>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0c      	ldr	r2, [pc, #48]	@ (8000834 <Ext_init_PA15+0x54>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000806:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= (1 << 15);        // Falling edge triggered on line PA15
 8000808:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <Ext_init_PA15+0x54>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <Ext_init_PA15+0x54>)
 800080e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000812:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI1_IRQn,1);
 8000814:	2101      	movs	r1, #1
 8000816:	2007      	movs	r0, #7
 8000818:	f7ff fd50 	bl	80002bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn); // Enable EXTI15
 800081c:	2028      	movs	r0, #40	@ 0x28
 800081e:	f7ff fd2f 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000822:	b662      	cpsie	i
}
 8000824:	bf00      	nop
	__enable_irq();                 // Enable global interrupt
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40013800 	.word	0x40013800
 8000834:	40013c00 	.word	0x40013c00

08000838 <is_ignited>:
int is_ignited()
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	return (((GPIOC->ODR)>>6)&1);
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <is_ignited+0x18>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	099b      	lsrs	r3, r3, #6
 8000842:	f003 0301 	and.w	r3, r3, #1
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40020800 	.word	0x40020800

08000854 <blink>:
void blink(int pin)//(1<<14)|(1<<15)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	//toggle after 2000ms
	if (it == 4)
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <blink+0x3c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b04      	cmp	r3, #4
 8000862:	d10e      	bne.n	8000882 <blink+0x2e>
	{
		GPIOB->ODR ^= pin;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <blink+0x40>)
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	490a      	ldr	r1, [pc, #40]	@ (8000894 <blink+0x40>)
 800086c:	4053      	eors	r3, r2
 800086e:	614b      	str	r3, [r1, #20]
		GPIOC->ODR ^= (1<<9);
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <blink+0x44>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <blink+0x44>)
 8000876:	f483 7300 	eor.w	r3, r3, #512	@ 0x200
 800087a:	6153      	str	r3, [r2, #20]
		it = 0;
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <blink+0x3c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	}
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000073 	.word	0x20000073
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800

0800089c <blink_off>:
void blink_off(int pin)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |= pin;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <blink_off+0x2c>)
 80008a6:	695a      	ldr	r2, [r3, #20]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4907      	ldr	r1, [pc, #28]	@ (80008c8 <blink_off+0x2c>)
 80008ac:	4313      	orrs	r3, r2
 80008ae:	614b      	str	r3, [r1, #20]
	GPIOC->ODR &=~(1<<9);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <blink_off+0x30>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <blink_off+0x30>)
 80008b6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80008ba:	6153      	str	r3, [r2, #20]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800

080008d0 <parking_light>:
void parking_light(int pin)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	//toggle after 500ms
	if (it)
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <parking_light+0x3c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00e      	beq.n	80008fe <parking_light+0x2e>
	{
		GPIOB->ODR ^= pin;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <parking_light+0x40>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	490a      	ldr	r1, [pc, #40]	@ (8000910 <parking_light+0x40>)
 80008e8:	4053      	eors	r3, r2
 80008ea:	614b      	str	r3, [r1, #20]
		GPIOC->ODR ^= (1<<9);
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <parking_light+0x44>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <parking_light+0x44>)
 80008f2:	f483 7300 	eor.w	r3, r3, #512	@ 0x200
 80008f6:	6153      	str	r3, [r2, #20]
		it = 0;
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <parking_light+0x3c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	}
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000073 	.word	0x20000073
 8000910:	40020400 	.word	0x40020400
 8000914:	40020800 	.word	0x40020800

08000918 <main>:

int main()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	gpio_config();
 800091e:	f7ff fcf7 	bl	8000310 <gpio_config>
	uart_init();
 8000922:	f7ff fd6d 	bl	8000400 <uart_init>
	adc_init();
 8000926:	f7ff fe9d 	bl	8000664 <adc_init>
	TIM1_PWM_Init();
 800092a:	f7ff fdef 	bl	800050c <TIM1_PWM_Init>
	TIM3_Init();
 800092e:	f7ff fe69 	bl	8000604 <TIM3_Init>
	Ext_init_PB7();
 8000932:	f7ff fecb 	bl	80006cc <Ext_init_PB7>
	Ext_init_PB3();
 8000936:	f7ff fef7 	bl	8000728 <Ext_init_PB3>
	Ext_init_PB4();
 800093a:	f7ff ff23 	bl	8000784 <Ext_init_PB4>
	Ext_init_PA15();
 800093e:	f7ff ff4f 	bl	80007e0 <Ext_init_PA15>

	int adc_data = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
	uint8_t adc_percentage = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	70fb      	strb	r3, [r7, #3]

	while(1)
	{
		if (is_ignited() == 0)						//ignition ON
 800094a:	f7ff ff75 	bl	8000838 <is_ignited>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	f040 80ab 	bne.w	8000aac <main+0x194>
//							button4,
//							it
//			);
//			send_string(buffer);
			//button 3
			switch (button3) {
 8000956:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac0 <main+0x1a8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d002      	beq.n	8000964 <main+0x4c>
 800095e:	2b02      	cmp	r3, #2
 8000960:	d008      	beq.n	8000974 <main+0x5c>
				case 2:
					blink_off(LED3);
					current_status = OFF;
					button3 = 0;
				default:
					break;
 8000962:	e011      	b.n	8000988 <main+0x70>
					current_status = RIGHT_INDICATOR_ON;
 8000964:	4b57      	ldr	r3, [pc, #348]	@ (8000ac4 <main+0x1ac>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
					blink(LED3);
 800096a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800096e:	f7ff ff71 	bl	8000854 <blink>
					break;
 8000972:	e00a      	b.n	800098a <main+0x72>
					blink_off(LED3);
 8000974:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000978:	f7ff ff90 	bl	800089c <blink_off>
					current_status = OFF;
 800097c:	4b51      	ldr	r3, [pc, #324]	@ (8000ac4 <main+0x1ac>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
					button3 = 0;
 8000982:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac0 <main+0x1a8>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
					break;
 8000988:	bf00      	nop
			}
			//button 4
			switch (button4) {
 800098a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac8 <main+0x1b0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d002      	beq.n	8000998 <main+0x80>
 8000992:	2b02      	cmp	r3, #2
 8000994:	d008      	beq.n	80009a8 <main+0x90>
				case 2:
					blink_off(LED4);
					current_status = OFF;
					button4 = 0;
				default:
					break;
 8000996:	e011      	b.n	80009bc <main+0xa4>
					current_status = LEFT_INDICATOR_ON;
 8000998:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac4 <main+0x1ac>)
 800099a:	2202      	movs	r2, #2
 800099c:	701a      	strb	r2, [r3, #0]
					blink(LED4);
 800099e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80009a2:	f7ff ff57 	bl	8000854 <blink>
					break;
 80009a6:	e00a      	b.n	80009be <main+0xa6>
					blink_off(LED4);
 80009a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80009ac:	f7ff ff76 	bl	800089c <blink_off>
					current_status = OFF;
 80009b0:	4b44      	ldr	r3, [pc, #272]	@ (8000ac4 <main+0x1ac>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
					button4 = 0;
 80009b6:	4b44      	ldr	r3, [pc, #272]	@ (8000ac8 <main+0x1b0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
					break;
 80009bc:	bf00      	nop
			}
			//button 2
			switch (count)
 80009be:	4b43      	ldr	r3, [pc, #268]	@ (8000acc <main+0x1b4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d83b      	bhi.n	8000a40 <main+0x128>
 80009c8:	a201      	add	r2, pc, #4	@ (adr r2, 80009d0 <main+0xb8>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	080009f9 	.word	0x080009f9
 80009dc:	08000a19 	.word	0x08000a19
			{
				case 1:
					Set_frq_duty_cycle_TIM1(10000, 10);
 80009e0:	210a      	movs	r1, #10
 80009e2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80009e6:	f7ff fde9 	bl	80005bc <Set_frq_duty_cycle_TIM1>
					break;
 80009ea:	e02c      	b.n	8000a46 <main+0x12e>
				case 2:
					Set_frq_duty_cycle_TIM1(10000, 90);
 80009ec:	215a      	movs	r1, #90	@ 0x5a
 80009ee:	f242 7010 	movw	r0, #10000	@ 0x2710
 80009f2:	f7ff fde3 	bl	80005bc <Set_frq_duty_cycle_TIM1>
					break;
 80009f6:	e026      	b.n	8000a46 <main+0x12e>
				case 3:
					if (current_status== OFF || current_status == PARKING_LIGHT_ON)
 80009f8:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <main+0x1ac>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <main+0xf0>
 8000a00:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <main+0x1ac>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d11d      	bne.n	8000a44 <main+0x12c>
					{
						parking_light(LED3|LED4);
 8000a08:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000a0c:	f7ff ff60 	bl	80008d0 <parking_light>
						current_status = PARKING_LIGHT_ON;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <main+0x1ac>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	701a      	strb	r2, [r3, #0]
					}
					break;
 8000a16:	e015      	b.n	8000a44 <main+0x12c>
				case 4:
					if (current_status == PARKING_LIGHT_ON)
 8000a18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <main+0x1ac>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d106      	bne.n	8000a2e <main+0x116>
					{
						blink_off(LED3|LED4);
 8000a20:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000a24:	f7ff ff3a 	bl	800089c <blink_off>
						current_status = OFF;
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <main+0x1ac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
					}
					Set_frq_duty_cycle_TIM1(10000, 0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000a34:	f7ff fdc2 	bl	80005bc <Set_frq_duty_cycle_TIM1>
					count = 0;
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <main+0x1b4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
					break;
 8000a3e:	e002      	b.n	8000a46 <main+0x12e>
				default:
					break;
 8000a40:	bf00      	nop
 8000a42:	e000      	b.n	8000a46 <main+0x12e>
					break;
 8000a44:	bf00      	nop
			}
			//receive message and transmit fuel level every 500ms
			if (ena_print == 1)
 8000a46:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <main+0x1b8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	f47f af7d 	bne.w	800094a <main+0x32>
			{
				sprintf(buffer, "received: %c\r", receive);
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <main+0x1bc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4920      	ldr	r1, [pc, #128]	@ (8000ad8 <main+0x1c0>)
 8000a58:	4820      	ldr	r0, [pc, #128]	@ (8000adc <main+0x1c4>)
 8000a5a:	f000 f9bb 	bl	8000dd4 <siprintf>
				send_string(buffer);
 8000a5e:	481f      	ldr	r0, [pc, #124]	@ (8000adc <main+0x1c4>)
 8000a60:	f7ff fd3e 	bl	80004e0 <send_string>
				while ((ADC1->SR>>1 & 1) != 1);
 8000a64:	bf00      	nop
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <main+0x1c8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d1f8      	bne.n	8000a66 <main+0x14e>
				//get adc value 12bit [11:0]
				adc_data = (ADC1->DR & 0xFFF);
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <main+0x1c8>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a7c:	607b      	str	r3, [r7, #4]
				adc_percentage = (adc_data*100/4096);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2264      	movs	r2, #100	@ 0x64
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da01      	bge.n	8000a8e <main+0x176>
 8000a8a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000a8e:	131b      	asrs	r3, r3, #12
 8000a90:	70fb      	strb	r3, [r7, #3]
				sprintf(buffer, "Fuel: %d %c\r", adc_percentage, '%');
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	2325      	movs	r3, #37	@ 0x25
 8000a96:	4913      	ldr	r1, [pc, #76]	@ (8000ae4 <main+0x1cc>)
 8000a98:	4810      	ldr	r0, [pc, #64]	@ (8000adc <main+0x1c4>)
 8000a9a:	f000 f99b 	bl	8000dd4 <siprintf>
				send_string(buffer);
 8000a9e:	480f      	ldr	r0, [pc, #60]	@ (8000adc <main+0x1c4>)
 8000aa0:	f7ff fd1e 	bl	80004e0 <send_string>
				ena_print = 0;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <main+0x1b8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e74e      	b.n	800094a <main+0x32>
			}
		}
		else							//ignition OFF
		{
			Set_frq_duty_cycle_TIM1(10000, 0);
 8000aac:	2100      	movs	r1, #0
 8000aae:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000ab2:	f7ff fd83 	bl	80005bc <Set_frq_duty_cycle_TIM1>
			blink_off(LED3|LED4);
 8000ab6:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000aba:	f7ff feef 	bl	800089c <blink_off>
		if (is_ignited() == 0)						//ignition ON
 8000abe:	e744      	b.n	800094a <main+0x32>
 8000ac0:	20000071 	.word	0x20000071
 8000ac4:	200000dc 	.word	0x200000dc
 8000ac8:	20000072 	.word	0x20000072
 8000acc:	20000070 	.word	0x20000070
 8000ad0:	20000074 	.word	0x20000074
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	0800171c 	.word	0x0800171c
 8000adc:	20000078 	.word	0x20000078
 8000ae0:	40012000 	.word	0x40012000
 8000ae4:	0800172c 	.word	0x0800172c

08000ae8 <EXTI9_5_IRQHandler>:
		}
	}
}
void EXTI9_5_IRQHandler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
    if ((((EXTI->PR) >> 7) & 1))
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <EXTI9_5_IRQHandler+0x34>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d005      	beq.n	8000b04 <EXTI9_5_IRQHandler+0x1c>
    {
    	GPIOC->ODR ^= (1<<6);
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <EXTI9_5_IRQHandler+0x38>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <EXTI9_5_IRQHandler+0x38>)
 8000afe:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000b02:	6153      	str	r3, [r2, #20]
    }
    EXTI->PR |= (1 << 7);
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <EXTI9_5_IRQHandler+0x34>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <EXTI9_5_IRQHandler+0x34>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0e:	6153      	str	r3, [r2, #20]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40013c00 	.word	0x40013c00
 8000b20:	40020800 	.word	0x40020800

08000b24 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    if ((((EXTI->PR) >> 3) & 1))
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <EXTI3_IRQHandler+0x60>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01e      	beq.n	8000b72 <EXTI3_IRQHandler+0x4e>
    {
    	if (is_ignited() == 0)
 8000b34:	f7ff fe80 	bl	8000838 <is_ignited>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d119      	bne.n	8000b72 <EXTI3_IRQHandler+0x4e>
    	{
			++count;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <EXTI3_IRQHandler+0x64>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <EXTI3_IRQHandler+0x64>)
 8000b48:	701a      	strb	r2, [r3, #0]
			if (count == 3 && current_status == OFF)
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <EXTI3_IRQHandler+0x64>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d10f      	bne.n	8000b72 <EXTI3_IRQHandler+0x4e>
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <EXTI3_IRQHandler+0x68>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10b      	bne.n	8000b72 <EXTI3_IRQHandler+0x4e>
			{
				GPIOB->ODR &=~(LED3|LED4);
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <EXTI3_IRQHandler+0x6c>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <EXTI3_IRQHandler+0x6c>)
 8000b60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b64:	6153      	str	r3, [r2, #20]
				GPIOC->ODR |= (1<<9);
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <EXTI3_IRQHandler+0x70>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <EXTI3_IRQHandler+0x70>)
 8000b6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b70:	6153      	str	r3, [r2, #20]
			}
    	}
    }
    EXTI->PR |= (1 << 3); // Clear the interrupt flag
 8000b72:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <EXTI3_IRQHandler+0x60>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a03      	ldr	r2, [pc, #12]	@ (8000b84 <EXTI3_IRQHandler+0x60>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6153      	str	r3, [r2, #20]
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013c00 	.word	0x40013c00
 8000b88:	20000070 	.word	0x20000070
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800

08000b98 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	if ((((EXTI->PR) >> 4) & 1))
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <EXTI4_IRQHandler+0x60>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d01e      	beq.n	8000be6 <EXTI4_IRQHandler+0x4e>
	{
		if (is_ignited() == 0)
 8000ba8:	f7ff fe46 	bl	8000838 <is_ignited>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d119      	bne.n	8000be6 <EXTI4_IRQHandler+0x4e>
		{
			if (current_status == OFF || current_status == RIGHT_INDICATOR_ON)
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <EXTI4_IRQHandler+0x64>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <EXTI4_IRQHandler+0x2a>
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <EXTI4_IRQHandler+0x64>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d111      	bne.n	8000be6 <EXTI4_IRQHandler+0x4e>
			{
				GPIOB->ODR &=~LED3;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <EXTI4_IRQHandler+0x68>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <EXTI4_IRQHandler+0x68>)
 8000bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bcc:	6153      	str	r3, [r2, #20]
				GPIOC->ODR |= (1<<9);
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <EXTI4_IRQHandler+0x6c>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <EXTI4_IRQHandler+0x6c>)
 8000bd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd8:	6153      	str	r3, [r2, #20]
				button3++;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <EXTI4_IRQHandler+0x70>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <EXTI4_IRQHandler+0x70>)
 8000be4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	EXTI->PR |= (1 << 4); // Clear the interrupt flag
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <EXTI4_IRQHandler+0x60>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a03      	ldr	r2, [pc, #12]	@ (8000bf8 <EXTI4_IRQHandler+0x60>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6153      	str	r3, [r2, #20]
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013c00 	.word	0x40013c00
 8000bfc:	200000dc 	.word	0x200000dc
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800
 8000c08:	20000071 	.word	0x20000071

08000c0c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	if ((((EXTI->PR) >> 15) & 1))
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <EXTI15_10_IRQHandler+0x60>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d01e      	beq.n	8000c5a <EXTI15_10_IRQHandler+0x4e>
	{
		if (is_ignited() == 0)
 8000c1c:	f7ff fe0c 	bl	8000838 <is_ignited>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d119      	bne.n	8000c5a <EXTI15_10_IRQHandler+0x4e>
		{
			if (current_status == OFF || current_status == LEFT_INDICATOR_ON)
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <EXTI15_10_IRQHandler+0x64>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <EXTI15_10_IRQHandler+0x2a>
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <EXTI15_10_IRQHandler+0x64>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d111      	bne.n	8000c5a <EXTI15_10_IRQHandler+0x4e>
			{
				GPIOB->ODR &=~LED4;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <EXTI15_10_IRQHandler+0x68>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <EXTI15_10_IRQHandler+0x68>)
 8000c3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c40:	6153      	str	r3, [r2, #20]
				GPIOC->ODR |= (1<<9);
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <EXTI15_10_IRQHandler+0x6c>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a0c      	ldr	r2, [pc, #48]	@ (8000c78 <EXTI15_10_IRQHandler+0x6c>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4c:	6153      	str	r3, [r2, #20]
				button4++;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <EXTI15_10_IRQHandler+0x70>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <EXTI15_10_IRQHandler+0x70>)
 8000c58:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	EXTI->PR |= (1 << 15);
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <EXTI15_10_IRQHandler+0x60>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a03      	ldr	r2, [pc, #12]	@ (8000c6c <EXTI15_10_IRQHandler+0x60>)
 8000c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c64:	6153      	str	r3, [r2, #20]
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013c00 	.word	0x40013c00
 8000c70:	200000dc 	.word	0x200000dc
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	20000072 	.word	0x20000072

08000c80 <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1<<0)))		//check if the timer reach the value or not
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <TIM3_IRQHandler+0x58>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d017      	beq.n	8000cc0 <TIM3_IRQHandler+0x40>
	{
		if (current_status == RIGHT_INDICATOR_ON || current_status == LEFT_INDICATOR_ON)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <TIM3_IRQHandler+0x5c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d003      	beq.n	8000ca0 <TIM3_IRQHandler+0x20>
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <TIM3_IRQHandler+0x5c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d105      	bne.n	8000cac <TIM3_IRQHandler+0x2c>
		{
			it++;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <TIM3_IRQHandler+0x60>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <TIM3_IRQHandler+0x60>)
 8000caa:	701a      	strb	r2, [r3, #0]
		}
		if (current_status == PARKING_LIGHT_ON)
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <TIM3_IRQHandler+0x5c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d102      	bne.n	8000cba <TIM3_IRQHandler+0x3a>
		{
			it = 1;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <TIM3_IRQHandler+0x60>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
		}
		ena_print = 1;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <TIM3_IRQHandler+0x64>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
	}
	TIM3->SR &= ~(1<<0);			//reset the flag
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <TIM3_IRQHandler+0x58>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <TIM3_IRQHandler+0x58>)
 8000cc6:	f023 0301 	bic.w	r3, r3, #1
 8000cca:	6113      	str	r3, [r2, #16]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	200000dc 	.word	0x200000dc
 8000ce0:	20000073 	.word	0x20000073
 8000ce4:	20000074 	.word	0x20000074

08000ce8 <USART2_IRQHandler>:
void USART2_IRQHandler()
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	if ((USART2->SR&(1<<5)))		//receive char
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <USART2_IRQHandler+0x24>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d004      	beq.n	8000d02 <USART2_IRQHandler+0x1a>
	{
		receive = USART2->DR;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <USART2_IRQHandler+0x24>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <USART2_IRQHandler+0x28>)
 8000d00:	701a      	strb	r2, [r3, #0]
	}
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	20000000 	.word	0x20000000

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f000 f866 	bl	8000e14 <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20018000 	.word	0x20018000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	200000e0 	.word	0x200000e0
 8000d7c:	20000230 	.word	0x20000230

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dae:	f000 f837 	bl	8000e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fdb1 	bl	8000918 <main>

08000db6 <LoopForever>:

LoopForever:
  b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000dc4:	0800177c 	.word	0x0800177c
  ldr r2, =_sbss
 8000dc8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000dcc:	2000022c 	.word	0x2000022c

08000dd0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <siprintf>:
 8000dd4:	b40e      	push	{r1, r2, r3}
 8000dd6:	b500      	push	{lr}
 8000dd8:	b09c      	sub	sp, #112	@ 0x70
 8000dda:	ab1d      	add	r3, sp, #116	@ 0x74
 8000ddc:	9002      	str	r0, [sp, #8]
 8000dde:	9006      	str	r0, [sp, #24]
 8000de0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <siprintf+0x38>)
 8000de6:	9107      	str	r1, [sp, #28]
 8000de8:	9104      	str	r1, [sp, #16]
 8000dea:	4909      	ldr	r1, [pc, #36]	@ (8000e10 <siprintf+0x3c>)
 8000dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8000df0:	9105      	str	r1, [sp, #20]
 8000df2:	6800      	ldr	r0, [r0, #0]
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	a902      	add	r1, sp, #8
 8000df8:	f000 f98c 	bl	8001114 <_svfiprintf_r>
 8000dfc:	9b02      	ldr	r3, [sp, #8]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	b01c      	add	sp, #112	@ 0x70
 8000e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e08:	b003      	add	sp, #12
 8000e0a:	4770      	bx	lr
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	ffff0208 	.word	0xffff0208

08000e14 <__errno>:
 8000e14:	4b01      	ldr	r3, [pc, #4]	@ (8000e1c <__errno+0x8>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000004 	.word	0x20000004

08000e20 <__libc_init_array>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	4d0d      	ldr	r5, [pc, #52]	@ (8000e58 <__libc_init_array+0x38>)
 8000e24:	4c0d      	ldr	r4, [pc, #52]	@ (8000e5c <__libc_init_array+0x3c>)
 8000e26:	1b64      	subs	r4, r4, r5
 8000e28:	10a4      	asrs	r4, r4, #2
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	42a6      	cmp	r6, r4
 8000e2e:	d109      	bne.n	8000e44 <__libc_init_array+0x24>
 8000e30:	4d0b      	ldr	r5, [pc, #44]	@ (8000e60 <__libc_init_array+0x40>)
 8000e32:	4c0c      	ldr	r4, [pc, #48]	@ (8000e64 <__libc_init_array+0x44>)
 8000e34:	f000 fc66 	bl	8001704 <_init>
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	10a4      	asrs	r4, r4, #2
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	42a6      	cmp	r6, r4
 8000e40:	d105      	bne.n	8000e4e <__libc_init_array+0x2e>
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e48:	4798      	blx	r3
 8000e4a:	3601      	adds	r6, #1
 8000e4c:	e7ee      	b.n	8000e2c <__libc_init_array+0xc>
 8000e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e52:	4798      	blx	r3
 8000e54:	3601      	adds	r6, #1
 8000e56:	e7f2      	b.n	8000e3e <__libc_init_array+0x1e>
 8000e58:	08001774 	.word	0x08001774
 8000e5c:	08001774 	.word	0x08001774
 8000e60:	08001774 	.word	0x08001774
 8000e64:	08001778 	.word	0x08001778

08000e68 <__retarget_lock_acquire_recursive>:
 8000e68:	4770      	bx	lr

08000e6a <__retarget_lock_release_recursive>:
 8000e6a:	4770      	bx	lr

08000e6c <_free_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4605      	mov	r5, r0
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d041      	beq.n	8000ef8 <_free_r+0x8c>
 8000e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e78:	1f0c      	subs	r4, r1, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfb8      	it	lt
 8000e7e:	18e4      	addlt	r4, r4, r3
 8000e80:	f000 f8e0 	bl	8001044 <__malloc_lock>
 8000e84:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <_free_r+0x90>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	b933      	cbnz	r3, 8000e98 <_free_r+0x2c>
 8000e8a:	6063      	str	r3, [r4, #4]
 8000e8c:	6014      	str	r4, [r2, #0]
 8000e8e:	4628      	mov	r0, r5
 8000e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e94:	f000 b8dc 	b.w	8001050 <__malloc_unlock>
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <_free_r+0x42>
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	1821      	adds	r1, r4, r0
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	bf01      	itttt	eq
 8000ea4:	6819      	ldreq	r1, [r3, #0]
 8000ea6:	685b      	ldreq	r3, [r3, #4]
 8000ea8:	1809      	addeq	r1, r1, r0
 8000eaa:	6021      	streq	r1, [r4, #0]
 8000eac:	e7ed      	b.n	8000e8a <_free_r+0x1e>
 8000eae:	461a      	mov	r2, r3
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	b10b      	cbz	r3, 8000eb8 <_free_r+0x4c>
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d9fa      	bls.n	8000eae <_free_r+0x42>
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	1850      	adds	r0, r2, r1
 8000ebc:	42a0      	cmp	r0, r4
 8000ebe:	d10b      	bne.n	8000ed8 <_free_r+0x6c>
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	4401      	add	r1, r0
 8000ec4:	1850      	adds	r0, r2, r1
 8000ec6:	4283      	cmp	r3, r0
 8000ec8:	6011      	str	r1, [r2, #0]
 8000eca:	d1e0      	bne.n	8000e8e <_free_r+0x22>
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	6053      	str	r3, [r2, #4]
 8000ed2:	4408      	add	r0, r1
 8000ed4:	6010      	str	r0, [r2, #0]
 8000ed6:	e7da      	b.n	8000e8e <_free_r+0x22>
 8000ed8:	d902      	bls.n	8000ee0 <_free_r+0x74>
 8000eda:	230c      	movs	r3, #12
 8000edc:	602b      	str	r3, [r5, #0]
 8000ede:	e7d6      	b.n	8000e8e <_free_r+0x22>
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	1821      	adds	r1, r4, r0
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf04      	itt	eq
 8000ee8:	6819      	ldreq	r1, [r3, #0]
 8000eea:	685b      	ldreq	r3, [r3, #4]
 8000eec:	6063      	str	r3, [r4, #4]
 8000eee:	bf04      	itt	eq
 8000ef0:	1809      	addeq	r1, r1, r0
 8000ef2:	6021      	streq	r1, [r4, #0]
 8000ef4:	6054      	str	r4, [r2, #4]
 8000ef6:	e7ca      	b.n	8000e8e <_free_r+0x22>
 8000ef8:	bd38      	pop	{r3, r4, r5, pc}
 8000efa:	bf00      	nop
 8000efc:	20000228 	.word	0x20000228

08000f00 <sbrk_aligned>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	4e0f      	ldr	r6, [pc, #60]	@ (8000f40 <sbrk_aligned+0x40>)
 8000f04:	460c      	mov	r4, r1
 8000f06:	6831      	ldr	r1, [r6, #0]
 8000f08:	4605      	mov	r5, r0
 8000f0a:	b911      	cbnz	r1, 8000f12 <sbrk_aligned+0x12>
 8000f0c:	f000 fba6 	bl	800165c <_sbrk_r>
 8000f10:	6030      	str	r0, [r6, #0]
 8000f12:	4621      	mov	r1, r4
 8000f14:	4628      	mov	r0, r5
 8000f16:	f000 fba1 	bl	800165c <_sbrk_r>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	d103      	bne.n	8000f26 <sbrk_aligned+0x26>
 8000f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	1cc4      	adds	r4, r0, #3
 8000f28:	f024 0403 	bic.w	r4, r4, #3
 8000f2c:	42a0      	cmp	r0, r4
 8000f2e:	d0f8      	beq.n	8000f22 <sbrk_aligned+0x22>
 8000f30:	1a21      	subs	r1, r4, r0
 8000f32:	4628      	mov	r0, r5
 8000f34:	f000 fb92 	bl	800165c <_sbrk_r>
 8000f38:	3001      	adds	r0, #1
 8000f3a:	d1f2      	bne.n	8000f22 <sbrk_aligned+0x22>
 8000f3c:	e7ef      	b.n	8000f1e <sbrk_aligned+0x1e>
 8000f3e:	bf00      	nop
 8000f40:	20000224 	.word	0x20000224

08000f44 <_malloc_r>:
 8000f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f48:	1ccd      	adds	r5, r1, #3
 8000f4a:	f025 0503 	bic.w	r5, r5, #3
 8000f4e:	3508      	adds	r5, #8
 8000f50:	2d0c      	cmp	r5, #12
 8000f52:	bf38      	it	cc
 8000f54:	250c      	movcc	r5, #12
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	4606      	mov	r6, r0
 8000f5a:	db01      	blt.n	8000f60 <_malloc_r+0x1c>
 8000f5c:	42a9      	cmp	r1, r5
 8000f5e:	d904      	bls.n	8000f6a <_malloc_r+0x26>
 8000f60:	230c      	movs	r3, #12
 8000f62:	6033      	str	r3, [r6, #0]
 8000f64:	2000      	movs	r0, #0
 8000f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001040 <_malloc_r+0xfc>
 8000f6e:	f000 f869 	bl	8001044 <__malloc_lock>
 8000f72:	f8d8 3000 	ldr.w	r3, [r8]
 8000f76:	461c      	mov	r4, r3
 8000f78:	bb44      	cbnz	r4, 8000fcc <_malloc_r+0x88>
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f7ff ffbf 	bl	8000f00 <sbrk_aligned>
 8000f82:	1c43      	adds	r3, r0, #1
 8000f84:	4604      	mov	r4, r0
 8000f86:	d158      	bne.n	800103a <_malloc_r+0xf6>
 8000f88:	f8d8 4000 	ldr.w	r4, [r8]
 8000f8c:	4627      	mov	r7, r4
 8000f8e:	2f00      	cmp	r7, #0
 8000f90:	d143      	bne.n	800101a <_malloc_r+0xd6>
 8000f92:	2c00      	cmp	r4, #0
 8000f94:	d04b      	beq.n	800102e <_malloc_r+0xea>
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	4639      	mov	r1, r7
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	eb04 0903 	add.w	r9, r4, r3
 8000fa0:	f000 fb5c 	bl	800165c <_sbrk_r>
 8000fa4:	4581      	cmp	r9, r0
 8000fa6:	d142      	bne.n	800102e <_malloc_r+0xea>
 8000fa8:	6821      	ldr	r1, [r4, #0]
 8000faa:	1a6d      	subs	r5, r5, r1
 8000fac:	4629      	mov	r1, r5
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f7ff ffa6 	bl	8000f00 <sbrk_aligned>
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	d03a      	beq.n	800102e <_malloc_r+0xea>
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	442b      	add	r3, r5
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	bb62      	cbnz	r2, 8001020 <_malloc_r+0xdc>
 8000fc6:	f8c8 7000 	str.w	r7, [r8]
 8000fca:	e00f      	b.n	8000fec <_malloc_r+0xa8>
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	1b52      	subs	r2, r2, r5
 8000fd0:	d420      	bmi.n	8001014 <_malloc_r+0xd0>
 8000fd2:	2a0b      	cmp	r2, #11
 8000fd4:	d917      	bls.n	8001006 <_malloc_r+0xc2>
 8000fd6:	1961      	adds	r1, r4, r5
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	6025      	str	r5, [r4, #0]
 8000fdc:	bf18      	it	ne
 8000fde:	6059      	strne	r1, [r3, #4]
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	bf08      	it	eq
 8000fe4:	f8c8 1000 	streq.w	r1, [r8]
 8000fe8:	5162      	str	r2, [r4, r5]
 8000fea:	604b      	str	r3, [r1, #4]
 8000fec:	4630      	mov	r0, r6
 8000fee:	f000 f82f 	bl	8001050 <__malloc_unlock>
 8000ff2:	f104 000b 	add.w	r0, r4, #11
 8000ff6:	1d23      	adds	r3, r4, #4
 8000ff8:	f020 0007 	bic.w	r0, r0, #7
 8000ffc:	1ac2      	subs	r2, r0, r3
 8000ffe:	bf1c      	itt	ne
 8001000:	1a1b      	subne	r3, r3, r0
 8001002:	50a3      	strne	r3, [r4, r2]
 8001004:	e7af      	b.n	8000f66 <_malloc_r+0x22>
 8001006:	6862      	ldr	r2, [r4, #4]
 8001008:	42a3      	cmp	r3, r4
 800100a:	bf0c      	ite	eq
 800100c:	f8c8 2000 	streq.w	r2, [r8]
 8001010:	605a      	strne	r2, [r3, #4]
 8001012:	e7eb      	b.n	8000fec <_malloc_r+0xa8>
 8001014:	4623      	mov	r3, r4
 8001016:	6864      	ldr	r4, [r4, #4]
 8001018:	e7ae      	b.n	8000f78 <_malloc_r+0x34>
 800101a:	463c      	mov	r4, r7
 800101c:	687f      	ldr	r7, [r7, #4]
 800101e:	e7b6      	b.n	8000f8e <_malloc_r+0x4a>
 8001020:	461a      	mov	r2, r3
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	42a3      	cmp	r3, r4
 8001026:	d1fb      	bne.n	8001020 <_malloc_r+0xdc>
 8001028:	2300      	movs	r3, #0
 800102a:	6053      	str	r3, [r2, #4]
 800102c:	e7de      	b.n	8000fec <_malloc_r+0xa8>
 800102e:	230c      	movs	r3, #12
 8001030:	6033      	str	r3, [r6, #0]
 8001032:	4630      	mov	r0, r6
 8001034:	f000 f80c 	bl	8001050 <__malloc_unlock>
 8001038:	e794      	b.n	8000f64 <_malloc_r+0x20>
 800103a:	6005      	str	r5, [r0, #0]
 800103c:	e7d6      	b.n	8000fec <_malloc_r+0xa8>
 800103e:	bf00      	nop
 8001040:	20000228 	.word	0x20000228

08001044 <__malloc_lock>:
 8001044:	4801      	ldr	r0, [pc, #4]	@ (800104c <__malloc_lock+0x8>)
 8001046:	f7ff bf0f 	b.w	8000e68 <__retarget_lock_acquire_recursive>
 800104a:	bf00      	nop
 800104c:	20000220 	.word	0x20000220

08001050 <__malloc_unlock>:
 8001050:	4801      	ldr	r0, [pc, #4]	@ (8001058 <__malloc_unlock+0x8>)
 8001052:	f7ff bf0a 	b.w	8000e6a <__retarget_lock_release_recursive>
 8001056:	bf00      	nop
 8001058:	20000220 	.word	0x20000220

0800105c <__ssputs_r>:
 800105c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001060:	688e      	ldr	r6, [r1, #8]
 8001062:	461f      	mov	r7, r3
 8001064:	42be      	cmp	r6, r7
 8001066:	680b      	ldr	r3, [r1, #0]
 8001068:	4682      	mov	sl, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4690      	mov	r8, r2
 800106e:	d82d      	bhi.n	80010cc <__ssputs_r+0x70>
 8001070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001078:	d026      	beq.n	80010c8 <__ssputs_r+0x6c>
 800107a:	6965      	ldr	r5, [r4, #20]
 800107c:	6909      	ldr	r1, [r1, #16]
 800107e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001082:	eba3 0901 	sub.w	r9, r3, r1
 8001086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800108a:	1c7b      	adds	r3, r7, #1
 800108c:	444b      	add	r3, r9
 800108e:	106d      	asrs	r5, r5, #1
 8001090:	429d      	cmp	r5, r3
 8001092:	bf38      	it	cc
 8001094:	461d      	movcc	r5, r3
 8001096:	0553      	lsls	r3, r2, #21
 8001098:	d527      	bpl.n	80010ea <__ssputs_r+0x8e>
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff ff52 	bl	8000f44 <_malloc_r>
 80010a0:	4606      	mov	r6, r0
 80010a2:	b360      	cbz	r0, 80010fe <__ssputs_r+0xa2>
 80010a4:	6921      	ldr	r1, [r4, #16]
 80010a6:	464a      	mov	r2, r9
 80010a8:	f000 fae8 	bl	800167c <memcpy>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80010b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b6:	81a3      	strh	r3, [r4, #12]
 80010b8:	6126      	str	r6, [r4, #16]
 80010ba:	6165      	str	r5, [r4, #20]
 80010bc:	444e      	add	r6, r9
 80010be:	eba5 0509 	sub.w	r5, r5, r9
 80010c2:	6026      	str	r6, [r4, #0]
 80010c4:	60a5      	str	r5, [r4, #8]
 80010c6:	463e      	mov	r6, r7
 80010c8:	42be      	cmp	r6, r7
 80010ca:	d900      	bls.n	80010ce <__ssputs_r+0x72>
 80010cc:	463e      	mov	r6, r7
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	4632      	mov	r2, r6
 80010d2:	4641      	mov	r1, r8
 80010d4:	f000 faa8 	bl	8001628 <memmove>
 80010d8:	68a3      	ldr	r3, [r4, #8]
 80010da:	1b9b      	subs	r3, r3, r6
 80010dc:	60a3      	str	r3, [r4, #8]
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	4433      	add	r3, r6
 80010e2:	6023      	str	r3, [r4, #0]
 80010e4:	2000      	movs	r0, #0
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	462a      	mov	r2, r5
 80010ec:	f000 fad4 	bl	8001698 <_realloc_r>
 80010f0:	4606      	mov	r6, r0
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d1e0      	bne.n	80010b8 <__ssputs_r+0x5c>
 80010f6:	6921      	ldr	r1, [r4, #16]
 80010f8:	4650      	mov	r0, sl
 80010fa:	f7ff feb7 	bl	8000e6c <_free_r>
 80010fe:	230c      	movs	r3, #12
 8001100:	f8ca 3000 	str.w	r3, [sl]
 8001104:	89a3      	ldrh	r3, [r4, #12]
 8001106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110a:	81a3      	strh	r3, [r4, #12]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	e7e9      	b.n	80010e6 <__ssputs_r+0x8a>
	...

08001114 <_svfiprintf_r>:
 8001114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001118:	4698      	mov	r8, r3
 800111a:	898b      	ldrh	r3, [r1, #12]
 800111c:	061b      	lsls	r3, r3, #24
 800111e:	b09d      	sub	sp, #116	@ 0x74
 8001120:	4607      	mov	r7, r0
 8001122:	460d      	mov	r5, r1
 8001124:	4614      	mov	r4, r2
 8001126:	d510      	bpl.n	800114a <_svfiprintf_r+0x36>
 8001128:	690b      	ldr	r3, [r1, #16]
 800112a:	b973      	cbnz	r3, 800114a <_svfiprintf_r+0x36>
 800112c:	2140      	movs	r1, #64	@ 0x40
 800112e:	f7ff ff09 	bl	8000f44 <_malloc_r>
 8001132:	6028      	str	r0, [r5, #0]
 8001134:	6128      	str	r0, [r5, #16]
 8001136:	b930      	cbnz	r0, 8001146 <_svfiprintf_r+0x32>
 8001138:	230c      	movs	r3, #12
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	b01d      	add	sp, #116	@ 0x74
 8001142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001146:	2340      	movs	r3, #64	@ 0x40
 8001148:	616b      	str	r3, [r5, #20]
 800114a:	2300      	movs	r3, #0
 800114c:	9309      	str	r3, [sp, #36]	@ 0x24
 800114e:	2320      	movs	r3, #32
 8001150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001154:	f8cd 800c 	str.w	r8, [sp, #12]
 8001158:	2330      	movs	r3, #48	@ 0x30
 800115a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80012f8 <_svfiprintf_r+0x1e4>
 800115e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001162:	f04f 0901 	mov.w	r9, #1
 8001166:	4623      	mov	r3, r4
 8001168:	469a      	mov	sl, r3
 800116a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800116e:	b10a      	cbz	r2, 8001174 <_svfiprintf_r+0x60>
 8001170:	2a25      	cmp	r2, #37	@ 0x25
 8001172:	d1f9      	bne.n	8001168 <_svfiprintf_r+0x54>
 8001174:	ebba 0b04 	subs.w	fp, sl, r4
 8001178:	d00b      	beq.n	8001192 <_svfiprintf_r+0x7e>
 800117a:	465b      	mov	r3, fp
 800117c:	4622      	mov	r2, r4
 800117e:	4629      	mov	r1, r5
 8001180:	4638      	mov	r0, r7
 8001182:	f7ff ff6b 	bl	800105c <__ssputs_r>
 8001186:	3001      	adds	r0, #1
 8001188:	f000 80a7 	beq.w	80012da <_svfiprintf_r+0x1c6>
 800118c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800118e:	445a      	add	r2, fp
 8001190:	9209      	str	r2, [sp, #36]	@ 0x24
 8001192:	f89a 3000 	ldrb.w	r3, [sl]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 809f 	beq.w	80012da <_svfiprintf_r+0x1c6>
 800119c:	2300      	movs	r3, #0
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011a6:	f10a 0a01 	add.w	sl, sl, #1
 80011aa:	9304      	str	r3, [sp, #16]
 80011ac:	9307      	str	r3, [sp, #28]
 80011ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80011b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80011b4:	4654      	mov	r4, sl
 80011b6:	2205      	movs	r2, #5
 80011b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011bc:	484e      	ldr	r0, [pc, #312]	@ (80012f8 <_svfiprintf_r+0x1e4>)
 80011be:	f7ff f80f 	bl	80001e0 <memchr>
 80011c2:	9a04      	ldr	r2, [sp, #16]
 80011c4:	b9d8      	cbnz	r0, 80011fe <_svfiprintf_r+0xea>
 80011c6:	06d0      	lsls	r0, r2, #27
 80011c8:	bf44      	itt	mi
 80011ca:	2320      	movmi	r3, #32
 80011cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80011d0:	0711      	lsls	r1, r2, #28
 80011d2:	bf44      	itt	mi
 80011d4:	232b      	movmi	r3, #43	@ 0x2b
 80011d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80011da:	f89a 3000 	ldrb.w	r3, [sl]
 80011de:	2b2a      	cmp	r3, #42	@ 0x2a
 80011e0:	d015      	beq.n	800120e <_svfiprintf_r+0xfa>
 80011e2:	9a07      	ldr	r2, [sp, #28]
 80011e4:	4654      	mov	r4, sl
 80011e6:	2000      	movs	r0, #0
 80011e8:	f04f 0c0a 	mov.w	ip, #10
 80011ec:	4621      	mov	r1, r4
 80011ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011f2:	3b30      	subs	r3, #48	@ 0x30
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d94b      	bls.n	8001290 <_svfiprintf_r+0x17c>
 80011f8:	b1b0      	cbz	r0, 8001228 <_svfiprintf_r+0x114>
 80011fa:	9207      	str	r2, [sp, #28]
 80011fc:	e014      	b.n	8001228 <_svfiprintf_r+0x114>
 80011fe:	eba0 0308 	sub.w	r3, r0, r8
 8001202:	fa09 f303 	lsl.w	r3, r9, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	9304      	str	r3, [sp, #16]
 800120a:	46a2      	mov	sl, r4
 800120c:	e7d2      	b.n	80011b4 <_svfiprintf_r+0xa0>
 800120e:	9b03      	ldr	r3, [sp, #12]
 8001210:	1d19      	adds	r1, r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	9103      	str	r1, [sp, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	bfbb      	ittet	lt
 800121a:	425b      	neglt	r3, r3
 800121c:	f042 0202 	orrlt.w	r2, r2, #2
 8001220:	9307      	strge	r3, [sp, #28]
 8001222:	9307      	strlt	r3, [sp, #28]
 8001224:	bfb8      	it	lt
 8001226:	9204      	strlt	r2, [sp, #16]
 8001228:	7823      	ldrb	r3, [r4, #0]
 800122a:	2b2e      	cmp	r3, #46	@ 0x2e
 800122c:	d10a      	bne.n	8001244 <_svfiprintf_r+0x130>
 800122e:	7863      	ldrb	r3, [r4, #1]
 8001230:	2b2a      	cmp	r3, #42	@ 0x2a
 8001232:	d132      	bne.n	800129a <_svfiprintf_r+0x186>
 8001234:	9b03      	ldr	r3, [sp, #12]
 8001236:	1d1a      	adds	r2, r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	9203      	str	r2, [sp, #12]
 800123c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001240:	3402      	adds	r4, #2
 8001242:	9305      	str	r3, [sp, #20]
 8001244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001308 <_svfiprintf_r+0x1f4>
 8001248:	7821      	ldrb	r1, [r4, #0]
 800124a:	2203      	movs	r2, #3
 800124c:	4650      	mov	r0, sl
 800124e:	f7fe ffc7 	bl	80001e0 <memchr>
 8001252:	b138      	cbz	r0, 8001264 <_svfiprintf_r+0x150>
 8001254:	9b04      	ldr	r3, [sp, #16]
 8001256:	eba0 000a 	sub.w	r0, r0, sl
 800125a:	2240      	movs	r2, #64	@ 0x40
 800125c:	4082      	lsls	r2, r0
 800125e:	4313      	orrs	r3, r2
 8001260:	3401      	adds	r4, #1
 8001262:	9304      	str	r3, [sp, #16]
 8001264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001268:	4824      	ldr	r0, [pc, #144]	@ (80012fc <_svfiprintf_r+0x1e8>)
 800126a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800126e:	2206      	movs	r2, #6
 8001270:	f7fe ffb6 	bl	80001e0 <memchr>
 8001274:	2800      	cmp	r0, #0
 8001276:	d036      	beq.n	80012e6 <_svfiprintf_r+0x1d2>
 8001278:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <_svfiprintf_r+0x1ec>)
 800127a:	bb1b      	cbnz	r3, 80012c4 <_svfiprintf_r+0x1b0>
 800127c:	9b03      	ldr	r3, [sp, #12]
 800127e:	3307      	adds	r3, #7
 8001280:	f023 0307 	bic.w	r3, r3, #7
 8001284:	3308      	adds	r3, #8
 8001286:	9303      	str	r3, [sp, #12]
 8001288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800128a:	4433      	add	r3, r6
 800128c:	9309      	str	r3, [sp, #36]	@ 0x24
 800128e:	e76a      	b.n	8001166 <_svfiprintf_r+0x52>
 8001290:	fb0c 3202 	mla	r2, ip, r2, r3
 8001294:	460c      	mov	r4, r1
 8001296:	2001      	movs	r0, #1
 8001298:	e7a8      	b.n	80011ec <_svfiprintf_r+0xd8>
 800129a:	2300      	movs	r3, #0
 800129c:	3401      	adds	r4, #1
 800129e:	9305      	str	r3, [sp, #20]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 0c0a 	mov.w	ip, #10
 80012a6:	4620      	mov	r0, r4
 80012a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012ac:	3a30      	subs	r2, #48	@ 0x30
 80012ae:	2a09      	cmp	r2, #9
 80012b0:	d903      	bls.n	80012ba <_svfiprintf_r+0x1a6>
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0c6      	beq.n	8001244 <_svfiprintf_r+0x130>
 80012b6:	9105      	str	r1, [sp, #20]
 80012b8:	e7c4      	b.n	8001244 <_svfiprintf_r+0x130>
 80012ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80012be:	4604      	mov	r4, r0
 80012c0:	2301      	movs	r3, #1
 80012c2:	e7f0      	b.n	80012a6 <_svfiprintf_r+0x192>
 80012c4:	ab03      	add	r3, sp, #12
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	462a      	mov	r2, r5
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <_svfiprintf_r+0x1f0>)
 80012cc:	a904      	add	r1, sp, #16
 80012ce:	4638      	mov	r0, r7
 80012d0:	f3af 8000 	nop.w
 80012d4:	1c42      	adds	r2, r0, #1
 80012d6:	4606      	mov	r6, r0
 80012d8:	d1d6      	bne.n	8001288 <_svfiprintf_r+0x174>
 80012da:	89ab      	ldrh	r3, [r5, #12]
 80012dc:	065b      	lsls	r3, r3, #25
 80012de:	f53f af2d 	bmi.w	800113c <_svfiprintf_r+0x28>
 80012e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80012e4:	e72c      	b.n	8001140 <_svfiprintf_r+0x2c>
 80012e6:	ab03      	add	r3, sp, #12
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	462a      	mov	r2, r5
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <_svfiprintf_r+0x1f0>)
 80012ee:	a904      	add	r1, sp, #16
 80012f0:	4638      	mov	r0, r7
 80012f2:	f000 f879 	bl	80013e8 <_printf_i>
 80012f6:	e7ed      	b.n	80012d4 <_svfiprintf_r+0x1c0>
 80012f8:	08001739 	.word	0x08001739
 80012fc:	08001743 	.word	0x08001743
 8001300:	00000000 	.word	0x00000000
 8001304:	0800105d 	.word	0x0800105d
 8001308:	0800173f 	.word	0x0800173f

0800130c <_printf_common>:
 800130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001310:	4616      	mov	r6, r2
 8001312:	4698      	mov	r8, r3
 8001314:	688a      	ldr	r2, [r1, #8]
 8001316:	690b      	ldr	r3, [r1, #16]
 8001318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800131c:	4293      	cmp	r3, r2
 800131e:	bfb8      	it	lt
 8001320:	4613      	movlt	r3, r2
 8001322:	6033      	str	r3, [r6, #0]
 8001324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001328:	4607      	mov	r7, r0
 800132a:	460c      	mov	r4, r1
 800132c:	b10a      	cbz	r2, 8001332 <_printf_common+0x26>
 800132e:	3301      	adds	r3, #1
 8001330:	6033      	str	r3, [r6, #0]
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	0699      	lsls	r1, r3, #26
 8001336:	bf42      	ittt	mi
 8001338:	6833      	ldrmi	r3, [r6, #0]
 800133a:	3302      	addmi	r3, #2
 800133c:	6033      	strmi	r3, [r6, #0]
 800133e:	6825      	ldr	r5, [r4, #0]
 8001340:	f015 0506 	ands.w	r5, r5, #6
 8001344:	d106      	bne.n	8001354 <_printf_common+0x48>
 8001346:	f104 0a19 	add.w	sl, r4, #25
 800134a:	68e3      	ldr	r3, [r4, #12]
 800134c:	6832      	ldr	r2, [r6, #0]
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	42ab      	cmp	r3, r5
 8001352:	dc26      	bgt.n	80013a2 <_printf_common+0x96>
 8001354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	3b00      	subs	r3, #0
 800135c:	bf18      	it	ne
 800135e:	2301      	movne	r3, #1
 8001360:	0692      	lsls	r2, r2, #26
 8001362:	d42b      	bmi.n	80013bc <_printf_common+0xb0>
 8001364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001368:	4641      	mov	r1, r8
 800136a:	4638      	mov	r0, r7
 800136c:	47c8      	blx	r9
 800136e:	3001      	adds	r0, #1
 8001370:	d01e      	beq.n	80013b0 <_printf_common+0xa4>
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	6922      	ldr	r2, [r4, #16]
 8001376:	f003 0306 	and.w	r3, r3, #6
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf02      	ittt	eq
 800137e:	68e5      	ldreq	r5, [r4, #12]
 8001380:	6833      	ldreq	r3, [r6, #0]
 8001382:	1aed      	subeq	r5, r5, r3
 8001384:	68a3      	ldr	r3, [r4, #8]
 8001386:	bf0c      	ite	eq
 8001388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800138c:	2500      	movne	r5, #0
 800138e:	4293      	cmp	r3, r2
 8001390:	bfc4      	itt	gt
 8001392:	1a9b      	subgt	r3, r3, r2
 8001394:	18ed      	addgt	r5, r5, r3
 8001396:	2600      	movs	r6, #0
 8001398:	341a      	adds	r4, #26
 800139a:	42b5      	cmp	r5, r6
 800139c:	d11a      	bne.n	80013d4 <_printf_common+0xc8>
 800139e:	2000      	movs	r0, #0
 80013a0:	e008      	b.n	80013b4 <_printf_common+0xa8>
 80013a2:	2301      	movs	r3, #1
 80013a4:	4652      	mov	r2, sl
 80013a6:	4641      	mov	r1, r8
 80013a8:	4638      	mov	r0, r7
 80013aa:	47c8      	blx	r9
 80013ac:	3001      	adds	r0, #1
 80013ae:	d103      	bne.n	80013b8 <_printf_common+0xac>
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b8:	3501      	adds	r5, #1
 80013ba:	e7c6      	b.n	800134a <_printf_common+0x3e>
 80013bc:	18e1      	adds	r1, r4, r3
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	2030      	movs	r0, #48	@ 0x30
 80013c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80013c6:	4422      	add	r2, r4
 80013c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80013cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80013d0:	3302      	adds	r3, #2
 80013d2:	e7c7      	b.n	8001364 <_printf_common+0x58>
 80013d4:	2301      	movs	r3, #1
 80013d6:	4622      	mov	r2, r4
 80013d8:	4641      	mov	r1, r8
 80013da:	4638      	mov	r0, r7
 80013dc:	47c8      	blx	r9
 80013de:	3001      	adds	r0, #1
 80013e0:	d0e6      	beq.n	80013b0 <_printf_common+0xa4>
 80013e2:	3601      	adds	r6, #1
 80013e4:	e7d9      	b.n	800139a <_printf_common+0x8e>
	...

080013e8 <_printf_i>:
 80013e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013ec:	7e0f      	ldrb	r7, [r1, #24]
 80013ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80013f0:	2f78      	cmp	r7, #120	@ 0x78
 80013f2:	4691      	mov	r9, r2
 80013f4:	4680      	mov	r8, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	469a      	mov	sl, r3
 80013fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80013fe:	d807      	bhi.n	8001410 <_printf_i+0x28>
 8001400:	2f62      	cmp	r7, #98	@ 0x62
 8001402:	d80a      	bhi.n	800141a <_printf_i+0x32>
 8001404:	2f00      	cmp	r7, #0
 8001406:	f000 80d2 	beq.w	80015ae <_printf_i+0x1c6>
 800140a:	2f58      	cmp	r7, #88	@ 0x58
 800140c:	f000 80b9 	beq.w	8001582 <_printf_i+0x19a>
 8001410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001418:	e03a      	b.n	8001490 <_printf_i+0xa8>
 800141a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800141e:	2b15      	cmp	r3, #21
 8001420:	d8f6      	bhi.n	8001410 <_printf_i+0x28>
 8001422:	a101      	add	r1, pc, #4	@ (adr r1, 8001428 <_printf_i+0x40>)
 8001424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001428:	08001481 	.word	0x08001481
 800142c:	08001495 	.word	0x08001495
 8001430:	08001411 	.word	0x08001411
 8001434:	08001411 	.word	0x08001411
 8001438:	08001411 	.word	0x08001411
 800143c:	08001411 	.word	0x08001411
 8001440:	08001495 	.word	0x08001495
 8001444:	08001411 	.word	0x08001411
 8001448:	08001411 	.word	0x08001411
 800144c:	08001411 	.word	0x08001411
 8001450:	08001411 	.word	0x08001411
 8001454:	08001595 	.word	0x08001595
 8001458:	080014bf 	.word	0x080014bf
 800145c:	0800154f 	.word	0x0800154f
 8001460:	08001411 	.word	0x08001411
 8001464:	08001411 	.word	0x08001411
 8001468:	080015b7 	.word	0x080015b7
 800146c:	08001411 	.word	0x08001411
 8001470:	080014bf 	.word	0x080014bf
 8001474:	08001411 	.word	0x08001411
 8001478:	08001411 	.word	0x08001411
 800147c:	08001557 	.word	0x08001557
 8001480:	6833      	ldr	r3, [r6, #0]
 8001482:	1d1a      	adds	r2, r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6032      	str	r2, [r6, #0]
 8001488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800148c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001490:	2301      	movs	r3, #1
 8001492:	e09d      	b.n	80015d0 <_printf_i+0x1e8>
 8001494:	6833      	ldr	r3, [r6, #0]
 8001496:	6820      	ldr	r0, [r4, #0]
 8001498:	1d19      	adds	r1, r3, #4
 800149a:	6031      	str	r1, [r6, #0]
 800149c:	0606      	lsls	r6, r0, #24
 800149e:	d501      	bpl.n	80014a4 <_printf_i+0xbc>
 80014a0:	681d      	ldr	r5, [r3, #0]
 80014a2:	e003      	b.n	80014ac <_printf_i+0xc4>
 80014a4:	0645      	lsls	r5, r0, #25
 80014a6:	d5fb      	bpl.n	80014a0 <_printf_i+0xb8>
 80014a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	da03      	bge.n	80014b8 <_printf_i+0xd0>
 80014b0:	232d      	movs	r3, #45	@ 0x2d
 80014b2:	426d      	negs	r5, r5
 80014b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014b8:	4859      	ldr	r0, [pc, #356]	@ (8001620 <_printf_i+0x238>)
 80014ba:	230a      	movs	r3, #10
 80014bc:	e011      	b.n	80014e2 <_printf_i+0xfa>
 80014be:	6821      	ldr	r1, [r4, #0]
 80014c0:	6833      	ldr	r3, [r6, #0]
 80014c2:	0608      	lsls	r0, r1, #24
 80014c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80014c8:	d402      	bmi.n	80014d0 <_printf_i+0xe8>
 80014ca:	0649      	lsls	r1, r1, #25
 80014cc:	bf48      	it	mi
 80014ce:	b2ad      	uxthmi	r5, r5
 80014d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80014d2:	4853      	ldr	r0, [pc, #332]	@ (8001620 <_printf_i+0x238>)
 80014d4:	6033      	str	r3, [r6, #0]
 80014d6:	bf14      	ite	ne
 80014d8:	230a      	movne	r3, #10
 80014da:	2308      	moveq	r3, #8
 80014dc:	2100      	movs	r1, #0
 80014de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80014e2:	6866      	ldr	r6, [r4, #4]
 80014e4:	60a6      	str	r6, [r4, #8]
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	bfa2      	ittt	ge
 80014ea:	6821      	ldrge	r1, [r4, #0]
 80014ec:	f021 0104 	bicge.w	r1, r1, #4
 80014f0:	6021      	strge	r1, [r4, #0]
 80014f2:	b90d      	cbnz	r5, 80014f8 <_printf_i+0x110>
 80014f4:	2e00      	cmp	r6, #0
 80014f6:	d04b      	beq.n	8001590 <_printf_i+0x1a8>
 80014f8:	4616      	mov	r6, r2
 80014fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80014fe:	fb03 5711 	mls	r7, r3, r1, r5
 8001502:	5dc7      	ldrb	r7, [r0, r7]
 8001504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001508:	462f      	mov	r7, r5
 800150a:	42bb      	cmp	r3, r7
 800150c:	460d      	mov	r5, r1
 800150e:	d9f4      	bls.n	80014fa <_printf_i+0x112>
 8001510:	2b08      	cmp	r3, #8
 8001512:	d10b      	bne.n	800152c <_printf_i+0x144>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	07df      	lsls	r7, r3, #31
 8001518:	d508      	bpl.n	800152c <_printf_i+0x144>
 800151a:	6923      	ldr	r3, [r4, #16]
 800151c:	6861      	ldr	r1, [r4, #4]
 800151e:	4299      	cmp	r1, r3
 8001520:	bfde      	ittt	le
 8001522:	2330      	movle	r3, #48	@ 0x30
 8001524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800152c:	1b92      	subs	r2, r2, r6
 800152e:	6122      	str	r2, [r4, #16]
 8001530:	f8cd a000 	str.w	sl, [sp]
 8001534:	464b      	mov	r3, r9
 8001536:	aa03      	add	r2, sp, #12
 8001538:	4621      	mov	r1, r4
 800153a:	4640      	mov	r0, r8
 800153c:	f7ff fee6 	bl	800130c <_printf_common>
 8001540:	3001      	adds	r0, #1
 8001542:	d14a      	bne.n	80015da <_printf_i+0x1f2>
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	b004      	add	sp, #16
 800154a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	4833      	ldr	r0, [pc, #204]	@ (8001624 <_printf_i+0x23c>)
 8001558:	2778      	movs	r7, #120	@ 0x78
 800155a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	6831      	ldr	r1, [r6, #0]
 8001562:	061f      	lsls	r7, r3, #24
 8001564:	f851 5b04 	ldr.w	r5, [r1], #4
 8001568:	d402      	bmi.n	8001570 <_printf_i+0x188>
 800156a:	065f      	lsls	r7, r3, #25
 800156c:	bf48      	it	mi
 800156e:	b2ad      	uxthmi	r5, r5
 8001570:	6031      	str	r1, [r6, #0]
 8001572:	07d9      	lsls	r1, r3, #31
 8001574:	bf44      	itt	mi
 8001576:	f043 0320 	orrmi.w	r3, r3, #32
 800157a:	6023      	strmi	r3, [r4, #0]
 800157c:	b11d      	cbz	r5, 8001586 <_printf_i+0x19e>
 800157e:	2310      	movs	r3, #16
 8001580:	e7ac      	b.n	80014dc <_printf_i+0xf4>
 8001582:	4827      	ldr	r0, [pc, #156]	@ (8001620 <_printf_i+0x238>)
 8001584:	e7e9      	b.n	800155a <_printf_i+0x172>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	f023 0320 	bic.w	r3, r3, #32
 800158c:	6023      	str	r3, [r4, #0]
 800158e:	e7f6      	b.n	800157e <_printf_i+0x196>
 8001590:	4616      	mov	r6, r2
 8001592:	e7bd      	b.n	8001510 <_printf_i+0x128>
 8001594:	6833      	ldr	r3, [r6, #0]
 8001596:	6825      	ldr	r5, [r4, #0]
 8001598:	6961      	ldr	r1, [r4, #20]
 800159a:	1d18      	adds	r0, r3, #4
 800159c:	6030      	str	r0, [r6, #0]
 800159e:	062e      	lsls	r6, r5, #24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	d501      	bpl.n	80015a8 <_printf_i+0x1c0>
 80015a4:	6019      	str	r1, [r3, #0]
 80015a6:	e002      	b.n	80015ae <_printf_i+0x1c6>
 80015a8:	0668      	lsls	r0, r5, #25
 80015aa:	d5fb      	bpl.n	80015a4 <_printf_i+0x1bc>
 80015ac:	8019      	strh	r1, [r3, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	6123      	str	r3, [r4, #16]
 80015b2:	4616      	mov	r6, r2
 80015b4:	e7bc      	b.n	8001530 <_printf_i+0x148>
 80015b6:	6833      	ldr	r3, [r6, #0]
 80015b8:	1d1a      	adds	r2, r3, #4
 80015ba:	6032      	str	r2, [r6, #0]
 80015bc:	681e      	ldr	r6, [r3, #0]
 80015be:	6862      	ldr	r2, [r4, #4]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4630      	mov	r0, r6
 80015c4:	f7fe fe0c 	bl	80001e0 <memchr>
 80015c8:	b108      	cbz	r0, 80015ce <_printf_i+0x1e6>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	6060      	str	r0, [r4, #4]
 80015ce:	6863      	ldr	r3, [r4, #4]
 80015d0:	6123      	str	r3, [r4, #16]
 80015d2:	2300      	movs	r3, #0
 80015d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015d8:	e7aa      	b.n	8001530 <_printf_i+0x148>
 80015da:	6923      	ldr	r3, [r4, #16]
 80015dc:	4632      	mov	r2, r6
 80015de:	4649      	mov	r1, r9
 80015e0:	4640      	mov	r0, r8
 80015e2:	47d0      	blx	sl
 80015e4:	3001      	adds	r0, #1
 80015e6:	d0ad      	beq.n	8001544 <_printf_i+0x15c>
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	079b      	lsls	r3, r3, #30
 80015ec:	d413      	bmi.n	8001616 <_printf_i+0x22e>
 80015ee:	68e0      	ldr	r0, [r4, #12]
 80015f0:	9b03      	ldr	r3, [sp, #12]
 80015f2:	4298      	cmp	r0, r3
 80015f4:	bfb8      	it	lt
 80015f6:	4618      	movlt	r0, r3
 80015f8:	e7a6      	b.n	8001548 <_printf_i+0x160>
 80015fa:	2301      	movs	r3, #1
 80015fc:	4632      	mov	r2, r6
 80015fe:	4649      	mov	r1, r9
 8001600:	4640      	mov	r0, r8
 8001602:	47d0      	blx	sl
 8001604:	3001      	adds	r0, #1
 8001606:	d09d      	beq.n	8001544 <_printf_i+0x15c>
 8001608:	3501      	adds	r5, #1
 800160a:	68e3      	ldr	r3, [r4, #12]
 800160c:	9903      	ldr	r1, [sp, #12]
 800160e:	1a5b      	subs	r3, r3, r1
 8001610:	42ab      	cmp	r3, r5
 8001612:	dcf2      	bgt.n	80015fa <_printf_i+0x212>
 8001614:	e7eb      	b.n	80015ee <_printf_i+0x206>
 8001616:	2500      	movs	r5, #0
 8001618:	f104 0619 	add.w	r6, r4, #25
 800161c:	e7f5      	b.n	800160a <_printf_i+0x222>
 800161e:	bf00      	nop
 8001620:	0800174a 	.word	0x0800174a
 8001624:	0800175b 	.word	0x0800175b

08001628 <memmove>:
 8001628:	4288      	cmp	r0, r1
 800162a:	b510      	push	{r4, lr}
 800162c:	eb01 0402 	add.w	r4, r1, r2
 8001630:	d902      	bls.n	8001638 <memmove+0x10>
 8001632:	4284      	cmp	r4, r0
 8001634:	4623      	mov	r3, r4
 8001636:	d807      	bhi.n	8001648 <memmove+0x20>
 8001638:	1e43      	subs	r3, r0, #1
 800163a:	42a1      	cmp	r1, r4
 800163c:	d008      	beq.n	8001650 <memmove+0x28>
 800163e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001646:	e7f8      	b.n	800163a <memmove+0x12>
 8001648:	4402      	add	r2, r0
 800164a:	4601      	mov	r1, r0
 800164c:	428a      	cmp	r2, r1
 800164e:	d100      	bne.n	8001652 <memmove+0x2a>
 8001650:	bd10      	pop	{r4, pc}
 8001652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800165a:	e7f7      	b.n	800164c <memmove+0x24>

0800165c <_sbrk_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4d06      	ldr	r5, [pc, #24]	@ (8001678 <_sbrk_r+0x1c>)
 8001660:	2300      	movs	r3, #0
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	602b      	str	r3, [r5, #0]
 8001668:	f7ff fb54 	bl	8000d14 <_sbrk>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	d102      	bne.n	8001676 <_sbrk_r+0x1a>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	b103      	cbz	r3, 8001676 <_sbrk_r+0x1a>
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	2000021c 	.word	0x2000021c

0800167c <memcpy>:
 800167c:	440a      	add	r2, r1
 800167e:	4291      	cmp	r1, r2
 8001680:	f100 33ff 	add.w	r3, r0, #4294967295
 8001684:	d100      	bne.n	8001688 <memcpy+0xc>
 8001686:	4770      	bx	lr
 8001688:	b510      	push	{r4, lr}
 800168a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800168e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001692:	4291      	cmp	r1, r2
 8001694:	d1f9      	bne.n	800168a <memcpy+0xe>
 8001696:	bd10      	pop	{r4, pc}

08001698 <_realloc_r>:
 8001698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169c:	4680      	mov	r8, r0
 800169e:	4615      	mov	r5, r2
 80016a0:	460c      	mov	r4, r1
 80016a2:	b921      	cbnz	r1, 80016ae <_realloc_r+0x16>
 80016a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016a8:	4611      	mov	r1, r2
 80016aa:	f7ff bc4b 	b.w	8000f44 <_malloc_r>
 80016ae:	b92a      	cbnz	r2, 80016bc <_realloc_r+0x24>
 80016b0:	f7ff fbdc 	bl	8000e6c <_free_r>
 80016b4:	2400      	movs	r4, #0
 80016b6:	4620      	mov	r0, r4
 80016b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016bc:	f000 f81a 	bl	80016f4 <_malloc_usable_size_r>
 80016c0:	4285      	cmp	r5, r0
 80016c2:	4606      	mov	r6, r0
 80016c4:	d802      	bhi.n	80016cc <_realloc_r+0x34>
 80016c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80016ca:	d8f4      	bhi.n	80016b6 <_realloc_r+0x1e>
 80016cc:	4629      	mov	r1, r5
 80016ce:	4640      	mov	r0, r8
 80016d0:	f7ff fc38 	bl	8000f44 <_malloc_r>
 80016d4:	4607      	mov	r7, r0
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d0ec      	beq.n	80016b4 <_realloc_r+0x1c>
 80016da:	42b5      	cmp	r5, r6
 80016dc:	462a      	mov	r2, r5
 80016de:	4621      	mov	r1, r4
 80016e0:	bf28      	it	cs
 80016e2:	4632      	movcs	r2, r6
 80016e4:	f7ff ffca 	bl	800167c <memcpy>
 80016e8:	4621      	mov	r1, r4
 80016ea:	4640      	mov	r0, r8
 80016ec:	f7ff fbbe 	bl	8000e6c <_free_r>
 80016f0:	463c      	mov	r4, r7
 80016f2:	e7e0      	b.n	80016b6 <_realloc_r+0x1e>

080016f4 <_malloc_usable_size_r>:
 80016f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016f8:	1f18      	subs	r0, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bfbc      	itt	lt
 80016fe:	580b      	ldrlt	r3, [r1, r0]
 8001700:	18c0      	addlt	r0, r0, r3
 8001702:	4770      	bx	lr

08001704 <_init>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	bf00      	nop
 8001708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170a:	bc08      	pop	{r3}
 800170c:	469e      	mov	lr, r3
 800170e:	4770      	bx	lr

08001710 <_fini>:
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001712:	bf00      	nop
 8001714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001716:	bc08      	pop	{r3}
 8001718:	469e      	mov	lr, r3
 800171a:	4770      	bx	lr
